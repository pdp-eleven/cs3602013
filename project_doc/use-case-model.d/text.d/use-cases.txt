ORCA: Online Routine Control & Automation - Use Cases


Guido, Malik, Blencowe, Schoonmaker


Responder Mode:

Responder is one of the three major modes of functionality. This mode is initiated when the binary is invoked with the --respond option and may be affected by other options used in the same invocation. Regardless of an other options used in conjunction with this option, entering responder mode guarentees the following behaviors: 

* Routines sent from program instances running in originator mode to the current instance will be executed and results from those routines will be returned.

* The current instance of the program will not exit unless signaled to do so by the operating system. 

* Responses to discovery broadcasts from program instances running in discovery mode containing information about the current instance of the program will be sent.


Discovery Mode:

Discovery is one of the three major modes of functionality. This mode is initiated when the binary is invoked with the --discover option and may be affected by other options used in the same invocation. Regardless of an other options used in conjunction with this option, entering responder mode guarentees the following behaviors: 

* A message containing information about the current instance of the program will be broadcast to all hosts connected to the local network.

* For a fixed period of time the current instance of the program will accept responses to the message and record them to the current configuration file.


Originator Mode:

Originator is one of the three major modes of functionality. This mode is initiated when the binary is invoked with the --send-by-ip, --send-by-uuid, --send-by-name, or --send-all options and may be affected by other options used in the same invocation. Each option corresponds to a single minor mode of functionality, which guarentees one of the following sets of behaviors:

% --send-by-ip:

* A newline delimited list of IP address in alphanumeric form will be read from the standard input until the end-of-file character is read.

* A fixed number of attempts will be made to send the current routine to each IP address listed on the standard input. In order to correctly negotiate this connection, the information associated with each IP is read from the current configuration.

* For each routine successfully sent a return channel will be created, which will wait for a fixed period of time for a connection from the program instance to which the routine was sent. 

* For each connection successfully made on a return channel the current handler will be executed. 

% --send-by-name:

* A newline delimited list of hostnames in alphanumeric form will be read from the standard input until the end-of-file character is read.

* A fixed number of attempts will be made to send the current routine to each hostname listed on the standard input. In order to correctly negotiate this connection, the information associated with each hostname is read from the current configuration.

* For each routine successfully sent a return channel will be created, which will wait for a fixed period of time for a connection from the program instance to which the routine was sent. 

* For each connection successfully made on a return channel the current handler will be executed. 

% --send-by-uuid:

* A newline delimited list of internal UUIDs in alphanumeric form will be read from the standard input until the end-of-file character is read.

* A fixed number of attempts will be made to send the current routine to each UUID listed on the standard input. In order to correctly negotiate this connection, the information associated with each UUID is read from the current configuration.

* For each routine successfully sent a return channel will be created, which will wait for a fixed period of time for a connection from the program instance to which the routine was sent. 

* For each connection successfully made on a return channel the current handler will be executed. 

% --send-by-all:

* A fixed number of attempts will be made to send the current routine to each host listed in the current configuratio file.

* For each routine successfully sent a return channel will be created, which will wait for a fixed period of time for a connection from the program instance to which the routine was sent. 

* For each connection successfully made on a return channel the current handler will be executed. 


  











