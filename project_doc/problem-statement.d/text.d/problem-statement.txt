ORCA: Online Routine Control & Automation

1. Rational:

The purpose of ORCA is a to provide a general purpose, block transmission oriented protocol for loading from the permanent storage of one networked computer into the core memory of another a routine for immediate execution and retrieving the results. This type of capability is useful in that it provides a means for a single operator to alter the programming of a large cluster of computers both quickly and reliably. Potential applications include parallel video rendering, encryption breaking, and peripheral control.


2. Functional Requirements:


- The protocol shall be stateless; no connection is to be maintained between any hosts unless data is being sent.

- All communications must be of a known length, which is to accompany the communication to its destination.

- All communications functions are to be considered to be unidirectional, regardless of whether or not the underlying communications channel supports bidirectional communication.

- All hosts shall support the use of the AES cipher keyed with a shared secret to encrypt all communications.

- Any time a routine is sent, an optional timestamp may be included with it, before and after this timestamp the routine will not be executed.

- All hosts may accept routines in one or both of the following formats: Source Code, the complete source of the routine; compilation takes place on the local hardware. Binary: a precompiled binary of the routine formatted as a Dynamically Linked Library.

- All hosts must support a High Conformance Tool Kit, a set of wrapper functions which expose the underlying libraries.

- Any host may impose a conformance check on incoming routines, during which the source is checked to ensure only functions from the HCTK are called in the routine.

- All hosts must provide temporary disk space to all routines, in the form of a file handle.

- All hosts must be able to either save or discard the data returned from a routine. Discarded data should never be considered to have been securely deleted.

- All hosts must be able to either save or discard the binary form of a routine. Discarded routines should never be considered to have been securely deleted.

- Any host that wishes to send routines to other hosts shall send a UDP broadcast to identify itself. If the network does not support use the broadcast address in this fashion, the host should fall back to sending requests iteratively to a range of addresses.

- All hosts that receive a broadcast request are to send a description of the capabilities they share to host from which the broadcast originated.

- Any host that receives a description of capabilities from a another host shall store that description in permanent storage.

- Any time a routine is sent, a Dynamically Linked Library containing the data and error handlers for the return values of the sent routine is loaded.

- It shall be possible to specify at program run time all options needed in one of three ways: 1. As command line arguments; 2. As option:"value" pairs in a plaintext configuration file; 3. Via a GUI which authors a command line and invokes the program, and can optionally save the configuration used to a file.



3. Nonfunctional Requirements:

- Development and Maintenance;

- Packaging and Distribution; Compilation shall produce a single executable that includes all functionality (except the GUI). All required libraries should either be included in the executable at compile time (preferred) or should be known to exist on the target hosts (acceptable). In the event that there are still any static files which must be distributed with the executable, they are to be stored as byte arrays within the executable, instantiated in the host filesystem on demand, and disposed of when no longer needed. In the event that code is included in the project that must be accompanied by a license statement, this statement is to be included in the source code and available through a nonstandard long argument to the program. At no point should registry entries be added or modified on the host, unless it is required by a library function. In such a case, the initial state of the registry should be preserved at program start and restored at program exit.

- Documentation; Documentation is to be thorough, accurate and specific. Except for long abstracts that may be used to clarify a concept, procedure or to introduce a section, all documentation should be written in the declarative, and each statement should cover the absolute minimum of functionality. Documentation of protocols and specifications shall be written in the future tense. Documentation of features as implemented is to be written in the present tense. All documentation should be done in plain text first and formatted as needed, master copies should never be kept in formatted form.

- Security and Authentication; All communications may be optionally encrypted, and all routines can be timestamped. Authentication is accomplished by sharing a secret between all hosts. When used in encrypted communications, the timestamp serves to foil most replay based attacks.

- User Interface; The runtime arguments to the program and the format of the configuration file will be well documented and consistent. A GUI form will be provided that is capable of configuring the program and formatting its output in a meaningful way.

- Robustness and Failure Recovery; Because ORCA deals with use cases where network resources a plentiful rather than scarce, the design strives to achieve maximum opacity during failure conditions. The first priority of a worker host is always notifying the host on which the failed routine originated, so that the routine can be restarted on another worker. Whenever a failure occurs, all available information on it should be sent back to the originating host as quickly as possible. The error handlers defined on the originating host will decide what steps to take based on this feedback. All hosts should always adhere to strict failsafe definitions during a failure, documented data loss is always to be considered preferable to a program malfunction or entering any state that cannot be reset remotely.

4. Pseudo Requirements:

- The development process will follow the Unified Development Methodology.

- The underlying system will be implemented in C++. The GUI front end will be developed in Visual Basic or Java.

- There are no limitations on using predeveloped libraries or frameworks, however their interface should be fully described in the Requirements document, the system building instructions should detail their building into the system, and they should be delivered as part of the system.

- The system will be tested on the computers in the Advanced Computer Science Laboratory WS 103.

- The project acceptance test will include a system building test.

